//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Mapping;

namespace DataModel
{
	/// <summary>
	/// Database       : lpp
	/// Data Source    : tcp://lpp21744.cfyerfwcpdul.eu-central-1.rds.amazonaws.com:8080
	/// Server Version : 9.5.4
	/// </summary>
	public partial class LppDB : LinqToDB.Data.DataConnection
	{
		public ITable<Degree>      Degrees      { get { return this.GetTable<Degree>(); } }
		public ITable<Player>      Players      { get { return this.GetTable<Player>(); } }
		public ITable<Playerscore> Playerscores { get { return this.GetTable<Playerscore>(); } }
		public ITable<Student>     Students     { get { return this.GetTable<Student>(); } }
		public ITable<Team>        Teams        { get { return this.GetTable<Team>(); } }

		public LppDB()
		{
			InitDataContext();
		}

		public LppDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();
	}

	[Table(Schema="public", Name="degrees")]
	public partial class Degree
	{
		[Column("id"),   PrimaryKey, Identity] public long   Id   { get; set; } // bigint
		[Column("name"), NotNull             ] public string Name { get; set; } // character varying(50)
		[Column("code"), NotNull             ] public string Code { get; set; } // character varying(6)

		#region Associations

		/// <summary>
		/// FK_degree_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="DegreeId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Student> Students { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="player")]
	public partial class Player
	{
		[Column("id"),       PrimaryKey, Identity] public long   Id       { get; set; } // bigint
		[Column("number"),   NotNull             ] public int    Number   { get; set; } // integer
		[Column("position"), NotNull             ] public char   Position { get; set; } // character varying(1)
		[Column("name"),     NotNull             ] public string Name     { get; set; } // character varying(50)
		[Column("id_team"),  NotNull             ] public long   IdTeam   { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_playerscore_id_player_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="IdPlayer", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Playerscore> Playerscores { get; set; }

		/// <summary>
		/// FK_player_id_team
		/// </summary>
		[Association(ThisKey="IdTeam", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_player_id_team", BackReferenceName="Players")]
		public Team Team { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="playerscore")]
	public partial class Playerscore
	{
		[Column("id"),        PrimaryKey, Identity] public long Id       { get; set; } // bigint
		[Column("id_player"), NotNull             ] public long IdPlayer { get; set; } // bigint
		[Column("day"),       NotNull             ] public long Day      { get; set; } // bigint
		[Column("score"),     NotNull             ] public long Score    { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_playerscore_id_player
		/// </summary>
		[Association(ThisKey="IdPlayer", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_playerscore_id_player", BackReferenceName="Playerscores")]
		public Player Player { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="students")]
	public partial class Student
	{
		[Column("id"),                PrimaryKey,  Identity] public long   Id               { get; set; } // bigint
		[Column("name"),              NotNull              ] public string Name             { get; set; } // character varying
		[Column("surname"),           NotNull              ] public string Surname          { get; set; } // character varying
		[Column("govern_identifier"),    Nullable          ] public string GovernIdentifier { get; set; } // character varying
		[Column("degree_id"),            Nullable          ] public long?  DegreeId         { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_degree
		/// </summary>
		[Association(ThisKey="DegreeId", OtherKey="Id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_degree", BackReferenceName="Students")]
		public Degree Degree { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="team")]
	public partial class Team
	{
		[Column("id"),   PrimaryKey, Identity] public long   Id   { get; set; } // bigint
		[Column("name"), NotNull             ] public string Name { get; set; } // character varying(50)

		#region Associations

		/// <summary>
		/// FK_player_id_team_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="IdTeam", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<Player> Players { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Degree Find(this ITable<Degree> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Player Find(this ITable<Player> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Playerscore Find(this ITable<Playerscore> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Student Find(this ITable<Student> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Team Find(this ITable<Team> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}
